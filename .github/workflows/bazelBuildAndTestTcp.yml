# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
# Also available under a BSD-style license. See LICENSE.

name: Bazel Build and Test (mlir-tcp)

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

# Ensure that only a single job or workflow using the same
# concurrency group will run at a time. This would cancel
# any in-progress jobs in the same github workflow and github
# ref (e.g. refs/heads/main or refs/pull/<pr_number>/merge).
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  ubuntu-build:
    name: ubuntu-x86_64 / mlir-tcp
    runs-on: ubuntu-latest

    steps:
    - name: Checkout mlir-tcp
      uses: actions/checkout@v3

    # Continually update cache even if there's a "hit" during
    # restore to avoid the cache going stale over time
    # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
    - name: Setup cache for bazel
      uses: actions/cache@v3
      with:
        path: ~/.cache/bazel
        key: mlir-tcp-bazel-build-cache-${{ runner.os }}-${{ github.sha }}
        restore-keys: |
          mlir-tcp-bazel-build-cache-${{ runner.os }}

    - name: Build docker image
      run: |
        docker build -f docker/Dockerfile \
                     -t mlir-tcp:ci \
                     --build-arg GROUP=$(id -gn) \
                     --build-arg GID=$(id -g) \
                     --build-arg USER=$(id -un) \
                     --build-arg UID=$(id -u) \
                     .

    - name: Verify clang-format was run (cpp lint)
      run: |
        docker run --rm \
                   -v "$(pwd)":"/opt/src/mlir-tcp" \
                   -v "${HOME}/.cache/bazel":"${HOME}/.cache/bazel" \
                   mlir-tcp:ci \
                   find . -type f -name "*.cpp" -o -name "*.h" | xargs clang-format -i
        if [ -n "$(git status --porcelain)" ]; then
          echo "Please run clang-format 'find . -type f -name "*.cpp" -o -name "*.h" | xargs clang-format -i' and commit changes."
          exit 1
        fi

    - name: Verify buildifier was run (bazel lint)
      run: |
        docker run --rm \
                   -v "$(pwd)":"/opt/src/mlir-tcp" \
                   -v "${HOME}/.cache/bazel":"${HOME}/.cache/bazel" \
                   mlir-tcp:ci \
                   bazel run //tools/buildifier:buildifier
        if [ -n "$(git status --porcelain)" ]; then
          echo "Please 'bazel run //tools/buildifier:buildifier' and commit changes."
          exit 1
        fi

    - name: Bazel build mlir-tcp
      run: |
        docker run --rm \
                   -v "$(pwd)":"/opt/src/mlir-tcp" \
                   -v "${HOME}/.cache/bazel":"${HOME}/.cache/bazel" \
                   mlir-tcp:ci \
                   bazel build //:tcp-opt

    - name: Bazel test mlir-tcp (lit tests, aot compile tests)
      run: |
        docker run --rm \
                   -v "$(pwd)":"/opt/src/mlir-tcp" \
                   -v "${HOME}/.cache/bazel":"${HOME}/.cache/bazel" \
                   mlir-tcp:ci \
                   bazel test //test/...
